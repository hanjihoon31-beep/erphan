// server/routes/inventoryRouter.js import express from "express"; import { verifyToken, verifyAdmin } from "../middleware/authMiddleware.js"; import Store from "../models/Store.js"; import Warehouse from "../models/Warehouse.js"; import Product from "../models/Product.js"; import Inventory from "../models/Inventory.js"; import MinimumStock from "../models/MinimumStock.js"; import StockTransfer from "../models/StockTransfer.js"; const router = express.Router(); // ==================== 매장 관리 ==================== // 전체 매장 목록 조회 router.get("/stores", verifyToken, async (req, res) => { try { const stores = await Store.find().populate("manager", "name email").sort({ storeNumber: 1 }); res.json(stores); } catch (error) { console.error("매장 목록 조회 오류:", error); res.status(500).json({ message: "매장 목록 조회 실패" }); } }); // 매장 생성 (관리자 전용) router.post("/stores", verifyToken, verifyAdmin, async (req, res) => { try { const { storeNumber, storeName, location, manager, phone } = req.body; const existingStore = await Store.findOne({ storeNumber }); if (existingStore) { return res.status(400).json({ message: "이미 존재하는 매장 번호입니다." }); } const newStore = await Store.create({ storeNumber, storeName, location, manager, phone, }); res.status(201).json({ success: true, store: newStore }); } catch (error) { console.error("매장 생성 오류:", error); res.status(500).json({ message: "매장 생성 실패" }); } }); // 매장 수정 router.put("/stores/:id", verifyToken, verifyAdmin, async (req, res) => { try { const { storeName, location, manager, phone, isActive } = req.body; const updatedStore = await Store.findByIdAndUpdate( req.params.id, { storeName, location, manager, phone, isActive }, { new: true } ); if (!updatedStore) { return res.status(404).json({ message: "매장을 찾을 수 없습니다." }); } res.json({ success: true, store: updatedStore }); } catch (error) { console.error("매장 수정 오류:", error); res.status(500).json({ message: "매장 수정 실패" }); } }); // 매장 삭제 router.delete("/stores/:id", verifyToken, verifyAdmin, async (req, res) => { try { const storeId = req.params.id; const relatedInventory = await Inventory.countDocuments({ store: storeId }); if (relatedInventory > 0) { return res.status(400).json({ message: `이 매장에는 ${relatedInventory}개의 재고 데이터가 있습니다. 먼저 재고를 처리해주세요.` }); } const deletedStore = await Store.findByIdAndDelete(storeId); if (!deletedStore) { return res.status(404).json({ message: "매장을 찾을 수 없습니다." }); } res.json({ success: true, message: "매장이 삭제되었습니다." }); } catch (error) { console.error("매장 삭제 오류:", error); res.status(500).json({ message: "매장 삭제 실패" }); } }); // ==================== 창고 관리 ==================== router.get("/warehouses", verifyToken, async (req, res) => { try { const warehouses = await Warehouse.find().sort({ warehouseName: 1 }); res.json(warehouses); } catch (error) { console.error("창고 목록 조회 오류:", error); res.status(500).json({ message: "창고 목록 조회 실패" }); } }); router.post("/warehouses", verifyToken, verifyAdmin, async (req, res) => { try { const { warehouseName, warehouseType, location, capacity } = req.body; const existingWarehouse = await Warehouse.findOne({ warehouseName }); if (existingWarehouse) { return res.status(400).json({ message: "이미 존재하는 창고입니다." }); } const newWarehouse = await Warehouse.create({ warehouseName, warehouseType, location, capacity, }); res.status(201).json({ success: true, warehouse: newWarehouse }); } catch (error) { console.error("창고 생성 오류:", error); res.status(500).json({ message: "창고 생성 실패" }); } }); // ==================== 제품 관리 ==================== router.get("/products", verifyToken, async (req, res) => { try { const { search, category, storageType } = req.query; let query = { isActive: true }; if (search) { query.productName = { $regex: search, $options: "i" }; } if (category) query.category = category; if (storageType) query.storageType = storageType; const products = await Product.find(query).sort({ productName: 1 }); res.json(products); } catch (error) { console.error("제품 목록 조회 오류:", error); res.status(500).json({ message: "제품 목록 조회 실패" }); } }); // ==================== 재고 ==================== router.get("/stock", verifyToken, async (req, res) => { try { const { productId, lowStock } = req.query; let query = {}; if (productId) query.product = productId; const inventory = await Inventory.find(query) .populate("product", "productName category unit storageType") .populate("warehouse", "warehouseName warehouseType") .populate("store", "storeNumber storeName") .populate("lastUpdatedBy", "name email") .sort({ lastUpdatedAt: -1 }); let result = inventory; if (lowStock === "true") { result = inventory.filter(item => item.quantity <= item.minimumStock); } res.json(result); } catch (error) { console.error("재고 조회 오류:", error); res.status(500).json({ message: "재고 조회 실패" }); } }); // ==================== 재고 이동 ==================== router.post("/transfer", verifyToken, async (req, res) => { try { const { productId, fromWarehouseId, fromStoreId, toWarehouseId, toStoreId, quantity, reason } = req.body; if (!productId || !quantity || quantity <= 0) { return res.status(400).json({ message: "제품과 수량을 확인해주세요." }); } const fromQuery = {}; if (fromWarehouseId) fromQuery.warehouse = fromWarehouseId; if (fromStoreId) fromQuery.store = fromStoreId; fromQuery.product = productId; const fromInventory = await Inventory.findOne(fromQuery); if (!fromInventory || fromInventory.quantity < quantity) { return res.status(400).json({ message: "출발지의 재고가 부족합니다." }); } const isAdmin = req.user.role === "admin" || req.user.role === "superadmin"; const transfer = await StockTransfer.create({ product: productId, fromWarehouse: fromWarehouseId, fromStore: fromStoreId, toWarehouse: toWarehouseId, toStore: toStoreId, quantity, reason, requestedBy: req.user._id, status: isAdmin ? "승인" : "대기", approvedBy: isAdmin ? req.user._id : null, approvedAt: isAdmin ? new Date() : null }); if (isAdmin) { await processStockTransfer(transfer); } res.status(201).json({ success: true, message: "재고 이동이 등록되었습니다." }); } catch (error) { console.error("재고 이동 요청 오류:", error); res.status(500).json({ message: "재고 이동 요청 실패" }); } }); async function processStockTransfer(transfer) { const { product, fromWarehouse, fromStore, toWarehouse, toStore, quantity } = transfer; const fromQuery = { product }; if (fromWarehouse) fromQuery.warehouse = fromWarehouse; if (fromStore) fromQuery.store = fromStore; const fromInventory = await Inventory.findOne(fromQuery); if (!fromInventory || fromInventory.quantity < quantity) { throw new Error("출발지 재고가 부족합니다."); } fromInventory.quantity -= quantity; fromInventory.lastUpdatedAt = new Date(); await fromInventory.save(); const toQuery = { product }; if (toWarehouse) toQuery.warehouse = toWarehouse; if (toStore) toQuery.store = toStore; let toInventory = await Inventory.findOne(toQuery); if (toInventory) { toInventory.quantity += quantity; toInventory.lastUpdatedAt = new Date(); await toInventory.save(); } else { await Inventory.create({ product, warehouse: toWarehouse, store: toStore, quantity, lastUpdatedAt: new Date() }); } transfer.status = "완료"; transfer.completedAt = new Date(); await transfer.save(); } export default router; 