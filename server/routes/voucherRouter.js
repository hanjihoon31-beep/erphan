// server/routes/voucherRouter.js import express from 'express'; import { verifyToken, verifyAdmin } from "../middleware/authMiddleware.js"; import VoucherType from "../models/VoucherType.js"; const router = express.Router(); // ==================== 권면 타입 관리 ==================== // 모든 권면 타입 조회 router.get("/", verifyToken, async (req, res) => { try { const { category, includeInactive } = req.query; let query = {}; if (category) { query.category = category; } if (!includeInactive) { query.isActive = true; } const vouchers = await VoucherType.find(query) .populate("createdBy", "name email") .populate("lastModifiedBy", "name email") .populate("deactivatedBy", "name email") .sort({ category: 1, createdAt: -1 }); res.json(vouchers); } catch (error) { console.error("권면 타입 조회 오류:", error); res.status(500).json({ message: "권면 타입 조회 실패" }); } }); // 특정 권면 타입 조회 router.get("/:id", verifyToken, async (req, res) => { try { const voucher = await VoucherType.findById(req.params.id) .populate("createdBy", "name email") .populate("lastModifiedBy", "name email"); if (!voucher) { return res.status(404).json({ message: "권면 타입을 찾을 수 없습니다." }); } res.json(voucher); } catch (error) { console.error("권면 타입 조회 오류:", error); res.status(500).json({ message: "권면 타입 조회 실패" }); } }); // 권면 타입 등록 (근무자 가능) router.post("/", verifyToken, async (req, res) => { try { const { category, name } = req.body; if (!category || !name || !name.trim()) { return res.status(400).json({ message: "카테고리와 권종명을 입력해주세요." }); } if (!["패키지권", "티켓"].includes(category)) { return res.status(400).json({ message: "카테고리는 '패키지권' 또는 '티켓'만 가능합니다." }); } // 중복 확인 (같은 카테고리 내에서) const existing = await VoucherType.findOne({ category, name: name.trim(), isActive: true }); if (existing) { return res.status(400).json({ message: "이미 등록된 권종명입니다." }); } const voucher = await VoucherType.create({ category, name: name.trim(), createdBy: req.user._id, isSystemDefined: false }); await voucher.populate("createdBy", "name email"); res.status(201).json({ success: true, voucher }); } catch (error) { console.error("권면 타입 등록 오류:", error); res.status(500).json({ message: "권면 타입 등록 실패" }); } }); // 권면 타입 이름 수정 (관리자) router.put("/:id", verifyToken, verifyAdmin, async (req, res) => { try { const { name } = req.body; if (!name || !name.trim()) { return res.status(400).json({ message: "권종명을 입력해주세요." }); } const voucher = await VoucherType.findById(req.params.id); if (!voucher) { return res.status(404).json({ message: "권면 타입을 찾을 수 없습니다." }); } // 중복 확인 (같은 카테고리 내에서, 자기 자신 제외) const existing = await VoucherType.findOne({ category: voucher.category, name: name.trim(), isActive: true, _id: { $ne: req.params.id } }); if (existing) { return res.status(400).json({ message: "이미 등록된 권종명입니다." }); } voucher.name = name.trim(); voucher.lastModifiedBy = req.user._id; voucher.lastModifiedAt = new Date(); await voucher.save(); await voucher.populate("createdBy", "name email"); await voucher.populate("lastModifiedBy", "name email"); res.json({ success: true, voucher }); } catch (error) { console.error("권면 타입 수정 오류:", error); res.status(500).json({ message: "권면 타입 수정 실패" }); } }); // 권면 타입 비활성화 (관리자) router.delete("/:id", verifyToken, verifyAdmin, async (req, res) => { try { const voucher = await VoucherType.findById(req.params.id); if (!voucher) { return res.status(404).json({ message: "권면 타입을 찾을 수 없습니다." }); } voucher.isActive = false; voucher.deactivatedBy = req.user._id; voucher.deactivatedAt = new Date(); await voucher.save(); res.json({ success: true, message: "권면 타입이 비활성화되었습니다." }); } catch (error) { console.error("권면 타입 비활성화 오류:", error); res.status(500).json({ message: "권면 타입 비활성화 실패" }); } }); // 권면 타입 재활성화 (관리자) router.patch("/:id/reactivate", verifyToken, verifyAdmin, async (req, res) => { try { const voucher = await VoucherType.findById(req.params.id); if (!voucher) { return res.status(404).json({ message: "권면 타입을 찾을 수 없습니다." }); } voucher.isActive = true; voucher.deactivatedBy = null; voucher.deactivatedAt = null; await voucher.save(); res.json({ success: true, message: "권면 타입이 재활성화되었습니다." }); } catch (error) { console.error("권면 타입 재활성화 오류:", error); res.status(500).json({ message: "권면 타입 재활성화 실패" }); } }); export default router; 